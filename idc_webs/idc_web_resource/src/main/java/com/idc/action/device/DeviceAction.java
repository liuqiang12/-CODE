package com.idc.action.device;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.idc.action.ImportExcelUtils;import com.idc.model.*;import com.idc.service.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import system.data.page.EasyUIData;import system.data.page.EasyUIPageBean;import system.data.supper.action.BaseController;import utils.plugins.excel.ExcelHelper;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.OutputStream;import java.util.*;/** * Created by Administrator on 2017/5/23. */@Controller@RequestMapping("/device")public class DeviceAction extends BaseController{    @Autowired    private IdcDeviceService idcDeviceService;    @Autowired    private NetDeviceService netDeviceService;    @Autowired    private SysOperateLogService sysOperateLogService;    @Autowired    private IdcHostService idcHostService;    @Autowired    private IdcRackunitService idcRackunitService;    @Autowired    private NetPortService netPortService;    @Autowired    private IdcRackService idcRackService;    @RequestMapping("/index.do")    public String index(){        return "device/index";    }    /**     * 加载设备列表     * @param page     * @param name 查询传递的值可为name或IP     * @param deviceclass 设备类别     * @return     */    @RequestMapping("/list.do")    @ResponseBody    public EasyUIData list(EasyUIPageBean page, String name, Integer deviceclass, String roomId, Long rackId, String netType,String searchType,Long searchId) {        EasyUIData easyUIData = new EasyUIData();        Map<String, Object> map = new HashMap<String, Object>();        map.put("roomid", roomId);        map.put("deviceclass", deviceclass);        map.put("name", name);        map.put("rackId", rackId);        map.put("netType", netType);        map.put("isvirtualdevice", 1);        map.put("searchType", searchType);        map.put("searchId", searchId);        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();        if (page == null || page.getPage() < 0) {//所有            list = idcDeviceService.queryListByObjectMap(map);            easyUIData.setTotal(list.size());            easyUIData.setRows(list);        }else{            list = idcDeviceService.queryListPageMap(page, map);            easyUIData.setTotal(page.getTotalRecord());            easyUIData.setRows(page.getItems());        }        return easyUIData;    }    /**     * 新增或修改设备     * @param idcDevice     * @param id 判断是新增还是修改     * @return     */    @RequestMapping("/addDeviceInfo.do")    @ResponseBody    public ExecuteResult addOrUpdateResourceInfo(IdcDevice idcDevice, @RequestParam(value = "id") Long id, @RequestParam(value = "deviceclass") Integer deviceclass) {        ExecuteResult executeResult = new ExecuteResult();        if(idcDevice!=null){            try {                idcDeviceService.saveOrUpdateDeviceInfo(idcDevice, id, deviceclass);                executeResult.setState(true);                executeResult.setMsg("保存设备成功");                //添加日志            }catch (Exception e){                e.printStackTrace();                logger.error("保存设备失败:",e);                executeResult.setState(false);                executeResult.setMsg("保存设备失败");            }        }else{            executeResult.setState(false);            executeResult.setMsg("新增设备失败,没有设备信息");        }        return executeResult;    }    /**     * 加载修改的设备信息     * @param id 设备ID     * @param map     * @param buttonType 修改还是查看详情     * @return     */    @RequestMapping("/deviceDetails.do")    public String getDeviceDetails(Long id,ModelMap map,String buttonType,Integer deviceclass,String flag){        logger.debug("==================根据主键加载设备信息================");        IdcDevice idcDevice=null;        NetDevice netDevice=null;        IdcHost idcHost = null;        IdcRack idcrack = null;        try {            idcDevice = idcDeviceService.getModelById(id);            idcDevice.setUplinedateStr(idcDevice.getUplinedate());            idcDevice.setInsurancedateStr(idcDevice.getInsurancedate());            if (idcDevice.getRackId() != null) {                idcrack = idcRackService.getModelById(idcDevice.getRackId().intValue());            }            netDevice = netDeviceService.getModelById(id);            idcHost = idcHostService.getModelById(id);            idcDevice.setNetDevice(netDevice);            idcDevice.setIdcHost(idcHost);        }catch (Exception e){            e.printStackTrace();        }        //添加日志        map.addAttribute("buttonType",buttonType);        map.addAttribute("idcDevice",idcDevice);        map.addAttribute("idcrack", idcrack);        map.addAttribute("id",id);        map.addAttribute("flag",flag);        if(deviceclass == 1){//网络设备            return "device/info";        }else if(deviceclass == 2){//主机设备            return "idchost/info";        }else{            logger.debug(String.valueOf(deviceclass)+"======================================");            return String.valueOf(deviceclass);        }    }    /**     * 删除设备     * @param ids 设备ID字符串     * @return     */    @RequestMapping("/deleteIdcDeviceByIds.do")    @ResponseBody    public ExecuteResult deleteResourceInfos(@RequestParam(value = "ids") String ids, Integer deviceclass) {        logger.debug("==================根据id删除设备================");        ExecuteResult executeResult = new ExecuteResult();        try {            //idcDeviceService.deleteDeviceByIds(ids, deviceclass);            List<String> list = Arrays.asList(ids.split(","));            idcDeviceService.updateDeviceToInvalidByIds(list);            executeResult.setState(true);            executeResult.setMsg("删除设备成功");            //添加日志        } catch (Exception e) {            e.printStackTrace();            logger.error("删除设备失败:",e);            executeResult.setState(false);            executeResult.setMsg("删除设备失败");        }        return executeResult;    }    //机架    @RequestMapping("/getRackModel.do")    @ResponseBody    public List<Map<String, Object>> getRackModel(){        List<Map<String, Object>> result = idcDeviceService.getRackModel();        return result;    }    /**     * 导出网络设备信息     * @return     */    @RequestMapping("/exportDeviceData")    @ResponseBody    public ExecuteResult exportResourceData(String searchStr) {        ExecuteResult executeResult = new ExecuteResult();        String title = "网络设备信息";        Map<String,String> headMap = new LinkedHashMap<String,String>();        //设备基本信息        headMap.put("IDEVICEID", "设备标识");        headMap.put("INAME", "设备名称");        headMap.put("ICODE", "设备编码");//headMap.put("IBUSINESSTYPEID","设备类型");        headMap.put("IRACKID","所属机架");headMap.put("ISTATUS","设备状态");headMap.put("ITICKETID","工单编号");headMap.put("IMODEL","规格");        headMap.put("IVENDOR","厂商");headMap.put("IOWNER","联系人");headMap.put("IUINSTALL","安装位置(U)");headMap.put("IUHEIGHT","设备高度(U)");        headMap.put("IOWNERTYPE", "产权性质");        headMap.put("IPWRPOWERTYPE", "电源类型");        headMap.put("IUPLINEDATE", "上架日期");        headMap.put("IDESCRIPTION","设备描述");headMap.put("IPOWER","设备功耗");headMap.put("IPHONE","联系人电话");headMap.put("IDEVICECLASS","设备类别");        //网络设备信息        headMap.put("NDEVICECLASS","网络设备类别");headMap.put("NROUTTYPE","网络设备类型");headMap.put("NROUTNAME","路由器名称");headMap.put("NNETWORKLAYER","网络层次");        headMap.put("NIPADDRESS", "IP");        headMap.put("NLOGINUSER", "登陆用户名");        headMap.put("NLOGINPSW", "登录密码");        headMap.put("NPRIVILEGEPSW", "特权密码");        headMap.put("NSTATUS","采集状态");headMap.put("NSNMPVERSION","SNMP版本");headMap.put("NSNMPPORT","SNMP采集端口");headMap.put("NSNMPCOMMUNITY","SNMP采集团体字(GET)");        headMap.put("NSNMPSETCOMMUNITY","SNMP采集团体字(SET)");headMap.put("NSNMPPASSWORD","SNMP密码");headMap.put("NSNMPSCTTYPE","SNMP密码加密方式");headMap.put("NSNMPKEYSCTTYPE","SNMP密匙加密方式");        headMap.put("NSNMPKEY","SNMP密匙");headMap.put("NDEVICEVERSION","设备版本");headMap.put("NLOGINMODEL","登陆模式");headMap.put("NTELNETPORT","telnet端口");        headMap.put("NTELNETFLOWID","登陆流程");headMap.put("NTELNETJUMPID","跳转流程");headMap.put("NTELNETVPNPARM","跳转VPN参数");headMap.put("NSYSDESCR","设备描述");        headMap.put("NSYSUPTIME","设备运行时间");headMap.put("NDISTRIBUTEDNODEID","设备归属采集点");        OutputStream outXlsx = null;        Map map = new HashMap();        map.put("tableName",NetDevice.tableName);        map.put("deviceClass",1);        if(searchStr!=null&&!"".equals(searchStr)){            String[] strArr = searchStr.split("_");            map.put("searchType",strArr[0]);            map.put("searchId",strArr[1]);        }        List<Map<String,Object>> list = idcDeviceService.getAllDeviceInfos(map);        try {            response.setContentType("application/vnd.ms-excel;charset=utf-8");            response.setHeader("Content-Disposition","attachment;filename=netDevice.xlsx");            //response.setCharacterEncoding("utf-8");            outXlsx = response.getOutputStream();            ExcelHelper.exportExcelX(title,headMap, JSONArray.parseArray(JSON.toJSONString(list)),null,0,outXlsx);            outXlsx.close();            executeResult.setState(true);            executeResult.setMsg("数据导出成功");        } catch (Exception e) {            executeResult.setState(false);            executeResult.setMsg("数据导出失败");        }        return executeResult;    }    /**     * 导入网络设备信息     * @return     */    @RequestMapping("importDeviceData")    @ResponseBody    public ExecuteResult importResourceData(HttpServletRequest request, HttpServletResponse response) {        ExecuteResult executeResult = new ExecuteResult();        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)request;        MultipartFile file = multipartRequest.getFile("uploadFile");        Map<String,Object> map= new HashMap<String,Object>();        if(file.isEmpty()){            map.put( "result", "error");            map.put( "msg", "上传文件不能为空" );        } else{            String originalFilename=file.getOriginalFilename();            try {                List<List<Object>> list = ImportExcelUtils.getDataListByExcel(file.getInputStream(),originalFilename );                idcDeviceService.importNetDeviceByExcel(list);                executeResult.setState(true);                executeResult.setMsg("导入成功");            } catch (Exception e) {                e.printStackTrace();                executeResult.setState(false);                executeResult.setMsg("导入失败");            }        }        return executeResult;    }    //查看设备是否可以上架    @RequestMapping("/getDeviceIsUpRack.do")    @ResponseBody    public ExecuteResult getDeviceIsUpRack(Long deviceid){        ExecuteResult executeResult = new ExecuteResult();        IdcRackunit idcRackunit = new IdcRackunit();        idcRackunit.setDeviceid(deviceid);        List<IdcRackunit> idcRackunitList = null;        try {            idcRackunitList = idcRackunitService.queryListByObject(idcRackunit);        }catch (Exception e){            e.printStackTrace();        }        //添加日志        if(idcRackunitList!=null&&idcRackunitList.size()>0){            executeResult.setMsg("dwon");        }else{            executeResult.setMsg("up");        }        return executeResult;    }    /**     * 设备上下架     * @param deviceid 设备标识     * @param flag up 上架    dwon 下架     * @param rackId 机架ID     * @param uheight 设备高度     * @param uinstall 安装位置     * @return     */    @RequestMapping("/upOrDwonRack.do")    @ResponseBody    public ExecuteResult upOrDwonRack(Long deviceid,String flag,Long rackId,Integer uheight,Integer uinstall){        ExecuteResult executeResult = new ExecuteResult();        IdcRackunit idcRackunit = new IdcRackunit();        List<IdcRackunit> idcRackunitList = null;        idcRackunit.setRackid(rackId);        //获取机架的机位列表        if(rackId!=null){            if(flag!=null&&!"".equals(flag)){                if("dwon".equals(flag)){//下架                    idcRackunit.setDeviceid(deviceid);                    try{                        idcRackunitService.down(rackId.intValue(),deviceid.intValue());                        executeResult.setState(true);                        executeResult.setMsg("下架成功");                    }catch(Exception e){                        e.printStackTrace();                        executeResult.setState(false);                        executeResult.setMsg("下架失败");                    }                }else if("up".equals(flag)){//上架                    int isAble = idcRackunitService.getRackunitNumByUheightAndRack(rackId.intValue(), uheight, uinstall);                    if (isAble > 0 && isAble >= uheight) {                        try {                            idcRackunitService.online(uinstall - 1, uheight - 1, rackId, deviceid);                            executeResult.setState(true);                            executeResult.setMsg("上架成功");                        } catch (Exception e) {                            e.printStackTrace();                            executeResult.setState(false);                            executeResult.setMsg("上架失败");                        }                    } else {                        executeResult.setState(false);                        executeResult.setMsg("机位不足");                    }                }            }else{                executeResult.setState(false);                executeResult.setMsg("上下架不明确,标识为：" + flag);            }        }else{            executeResult.setState(false);            executeResult.setMsg("没有归属机架,不能快速上架");        }        return executeResult;    }    /******************************************资源分配************************************************/    /**     * 准备分配资源列表     * @param rackIds     * @param roomId     * @param map     * @return     */    @RequestMapping("/preDistributionDeviceList")    public String preDistributionDeviceList(String rackIds, Long roomId, Long portIdA, ModelMap map) {        map.addAttribute("rackIds", rackIds);        map.addAttribute("roomId",roomId);        map.addAttribute("portIdA", portIdA);        return "device/distributionDeviceList";    }    /**     * 获取资源分配列表     * @param name     * @param roomId     * @return     */    @RequestMapping("/distributionDeviceList/{roomId}")    @ResponseBody    public EasyUIData distributionDeviceList(EasyUIPageBean page, String name, @PathVariable Long roomId) {        EasyUIData easyUIData = new EasyUIData();        Map<String,Object> map = new HashMap<String,Object>();        map.put("name",name);        map.put("roomId",roomId);        map.put("isvirtualdevice",1);//不是虚拟设备        List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();        if(page==null||page.getPage()<0){//所有            list= idcDeviceService.queryDistributionDeviceList(map);            easyUIData.setTotal(list.size());            easyUIData.setRows(list);        }else{            list = idcDeviceService.queryDistributionDeviceListPage(page,map);            easyUIData.setTotal(page.getTotalRecord());            easyUIData.setRows(page.getItems());        }        return easyUIData;    }    /**     * 根据rack_id获取端口列表     *     * @param rackIds     * @return     */    @RequestMapping("/getNetPortListByRackId")    @ResponseBody    public List<Map<String, Object>> getNetPortListByRackId(String rackIds) {        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();        if (rackIds != null && !"".equals(rackIds)) {            list = netPortService.getNetPortListByRackId(rackIds);        }        return list;    }    @RequestMapping("/queryDeviceList")    @ResponseBody    public EasyUIData queryDeviceList(EasyUIPageBean page, String name) {        EasyUIData easyUIData = new EasyUIData();        IdcDevice idcDevice = new IdcDevice();        idcDevice.setName(name);        List<Map<String, Object>> list = new ArrayList<>();        list = idcDeviceService.queryDeviceList(page, idcDevice);        easyUIData.setTotal(page.getTotalRecord());        easyUIData.setRows(page.getItems());        return easyUIData;    }    @RequestMapping("/getDeviceList.do")    @ResponseBody    public List getDeviceList(String q) {        IdcDevice idcDevice = new IdcDevice();        EasyUIPageBean easyUIPageBean = new EasyUIPageBean(1,Integer.MAX_VALUE-1);        idcDevice.setName(q);        idcDevice.setDeviceclass(1);        List<Map<String, Object>> maps = idcDeviceService.queryListPageMap(easyUIPageBean, idcDevice);        return maps;    }    //通过设备IDS查看设备是否已上架    @RequestMapping("/queryDeviceNumByDeviceId")    @ResponseBody    public ExecuteResult queryDeviceNumByDeviceId(String ids) {        ExecuteResult executeResult = new ExecuteResult();        int deviceNum = 0;        String deviceNameStr = "";        if (ids != null && !"".equals(ids)) {            List<String> idList = Arrays.asList(ids.split(","));            List<Map<String, Object>> list = idcDeviceService.getDeviceNumByIds(idList);            if (list != null && list.size() > 0) {                for (int i = 0; i < list.size(); i++) {                    deviceNum = list.get(i).get("DEVICENUM") == null ? 0 : Integer.parseInt(list.get(i).get("DEVICENUM").toString());                    if (deviceNum > 0) {                        deviceNameStr += list.get(i).get("DEVICENAME") == null ? "" : list.get(i).get("DEVICENAME") + ",";                    }                }            }        }        executeResult.setMsg(deviceNameStr==""?"":deviceNameStr.substring(0, deviceNameStr.length() - 1));        return executeResult;    }}