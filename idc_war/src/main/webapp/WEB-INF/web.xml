<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>Archetype Created Web Application</display-name>
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>idc.root</param-value>
	</context-param>
	<!-- 加载所有的xml配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:config/spring-applicationContext.xml</param-value>
	</context-param>
	<!-- 配置加载log4j.xml文件路径 -->
	<!-- 日志记录 -->
	<context-param>
		<!-- 日志配置文件路径 -->
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:/log4j.properties</param-value>
	</context-param>
	<context-param>
		<!-- 日志页面的刷新间隔 -->
		<param-name>log4jRefreshInterval</param-name>
		<param-value>6000</param-value>
	</context-param>
	<!-- 日志监听需要放到ContextLoaderListener之前:[防止日志错误] -->
	<!-- This parameter tells Restlet servlet the name of the spring bean who handles the REST methods invocation -->
	<context-param>
		<param-name>org.restlet.component</param-name>
		<param-value>restletComponent</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<listener>
		<listener-class>system.data.listener.ContextListener</listener-class>
	</listener>
	<!--Spring MVC是通过DispatcherServlet来加载Spring配置文件的，因此不需要在web.xml中配置ContextLoaderListener。
  但是CXF却需要通过ContextLoaderListener来加载Spring。-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Spring 刷新Introspector防止内存泄露 特别是针对quartz -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- security管理会话监听 -->
	 <listener id="Listener_Spring_Security_Session_Event_Publisher">
	 <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	 </listener>
    <!--项目启动时自动创建权限 add by lilj-->
    <!--<listener>
        <listener-class>com.idc.action.PromissionController</listener-class>
    </listener>-->
    <!--为了在项目中使用Spring Security控制权限，首先要在web.xml中配置过滤器，这样我们就可以控制对这个项目的每个请求了。 -->
 	 <filter>
 		<filter-name>springSecurityFilterChain</filter-name>
 		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
 	</filter>
 	<filter-mapping>
 		<filter-name>springSecurityFilterChain</filter-name>
 		<url-pattern>/*</url-pattern>
 	</filter-mapping>

	<!-- spring MVC的核心就是DispatcherServlet，使用springMVC的第一步就是将下面的servlet放入web.xml
		servlet-name属性非常重要，默认情况下，DispatchServlet会加载这个名字-servlet.xml的文件，如下，就会加载 dispather-servlet.xml，也是在WEN-INF目录下。 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/spring-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<!-- 异步支持 -->
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 字符集过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- JSONP -->
	<filter>
		<filter-name>JSONPFilter</filter-name>
		<filter-class>org.activiti.explorer.servlet.JsonpCallbackFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>JSONPFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- Modeler的Rest服务 -->
	<servlet>
		<servlet-name>ModelRestServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/explorer/spring-mvc-modeler.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ModelRestServlet</servlet-name>
		<url-pattern>/service/*</url-pattern>
	</servlet-mapping>

	<!-- Rest接口 -->
	<servlet>
		<servlet-name>RestServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/explorer/spring-mvc-rest.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>RestServlet</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<!-- idc的所有服务接口都应该是由这个请求 -->
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/webService/*</url-pattern>
	</servlet-mapping>



	<!-- Restlet servlet - it's name matches the base rest endpoint URI -->
	<servlet>
		<servlet-name>rest</servlet-name>
		<servlet-class>org.restlet.ext.spring.SpringServerServlet</servlet-class>
		<init-param>
			<param-name>org.restlet.component</param-name>
			<!-- this value must match the bean id of the Restlet component you will configure in Spring (below) -->
			<param-value>restletComponent</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<!-- Restlet servlet mapping -->
	<servlet-mapping>
		<servlet-name>rest</servlet-name>
		<url-pattern>/web_rs/*</url-pattern>
	</servlet-mapping>
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>druidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>/public/*,*.js,*.css,/druid*,*.jsp,*.swf</param-value>
        </init-param>
        <init-param>
            <param-name>principalSessionName</param-name>
            <param-value>sessionInfo</param-value>
        </init-param>
        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>druidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<welcome-file-list>
        <welcome-file>/welcome.jsp</welcome-file>
		<welcome-file>/login.jsp</welcome-file>
	</welcome-file-list>
	<!-- 错误跳转页面 -->
	<error-page>
		<!-- 路径不正确 -->
		<error-code>404</error-code>
		<location>/error/404.jsp</location>
	</error-page>
	<error-page>
		<!-- 没有访问权限，访问被禁止 -->
		<error-code>405</error-code>
		<location>/error/405.jsp</location>
	</error-page>
	<error-page>
		<!-- 内部错误 -->
		<error-code>500</error-code>
		<location>/error/500.jsp</location>
	</error-page>
	<!-- 【流程标签】 -->
	<jsp-config>
		<taglib>
			<taglib-uri>http://jbpm.idc.tag.cn/</taglib-uri>
			<taglib-location>/WEB-INF/tlds/JbpmTag.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>http://jbpmSecurity.idc.tag.cn/</taglib-uri>
			<taglib-location>/WEB-INF/tlds/security.tld</taglib-location>
		</taglib>
	</jsp-config>
</web-app>